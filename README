Red-Black Tree

Drzewo czerwono-czarne – rodzaj samoorganizującego się binarnego drzewa poszukiwań – struktury danych stosowanej 
w informatyce najczęściej do implementacji tablic asocjacyjnych.

Drzewa czerwono-czarne gwarantują, iż ich wysokość nie przekroczy dwukrotnej wartości wysokości minimalnej. 
Dokonywane jest to przez kolorowanie węzłów na czerwono lub czarno i stosowanie po każdej operacji wstawiania lub 
usuwania odpowiedniej procedury równoważącej drzewo, tak aby były spełnione następujące warunki:

    -Każdy węzeł drzewa jest albo czerwony, albo czarny.
    -Każdy liść drzewa (węzeł pusty nil) jest zawsze czarny.
    -Korzeń drzewa jest zawsze czarny.
    -Jeśli węzeł jest czerwony, to obaj jego synowie są czarni.
    -Każda prosta ścieżka od danego węzła do dowolnego z jego liści potomnych zawiera tę samą liczbę węzłów czarnych.
    -Można usunąć tylko leaf node

Charakteryzują się niską złożonością obliczeniową elementarnych operacji, takich jak 
    -wstawianie (O(log(n))), 
    -wyszukiwanie (O(log(n))), 
    -usuwanie elementów z drzewa (O(log(n))). 

Pseudokod podstawowych algorytmów:
 
Insertion: 
rbtree_insert(Tree, node)
    bst_insert(Tree, node) //normalne wstawianie BST
    while node.parent.color == RED
        if node.parent == node.parent.parent.right
            uncle = node.parent.parent.left //wujek jest lewym dzieckiem dziadka
            if uncle.color == RED // rodzic czerwony i wujek też czerwony
                uncle.color = BLACK
                node.parent.color = BLACK
                node.parent.parent.color = RED
                node = node.parent.parent
             else if node == node.parent.left /* rodzic jest prawym dzieckiem dziadka,
             					                node jest lewym dzieckiem rodzica*/
                    node = node.parent
                    rotate_right(Tree, node)
                node.parent.color = BLACK
                node.parent.parent.color = RED
                rotate_left(Tree, node.parent.parent)
        else (to samo tylko zamienić "left" i "right" miejscami)
    Tree.root.color = BLACK

Deletion:
rbtree_delete(Tree, node)
    bst_delete(Tree, node) //normalne usuwanie BST
    while node != Tree.root and node.color == BLACK
        if node == node.parent.left
            sibling = node.parent.right //brat węzła
            if sibling.color == RED
                sibling.color = BLACK 
                node.parent.color = RED 
                rotate_left(Tree, node.parent) 
                sibling = node.parent.right 
            if sibling.left.color == BLACK and sibling.right.color == BLACK //jeśli brat czarny i jego dzieci czarne
                sibling.color = RED 
                node = node.parent
            else if sibling.right.color == BLACK
                    sibling.left.color = BLACK 
                    sibling.color = RED 
                    rotate_right(Tree, sibling) 
                    sibling = node.parent.right 
                sibling.color = node.parent.right // node czarny, jego brat czarny, brata prawe dziecko czerwone
                node.parent.color = BLACK
                sibling.right.color = BLACK 
                rotate_left(Tree, node.parent) 
                node = T.root
        else (to samo tylko zamienić "left" i "right" miejscami)
    node.color = BLACK

Interfejs:
    class RedBlackTree{
    	RedBlackTree(); //konstruktor
    	~RedBlackTree(); //destruktor
    	bool empty() const; // sprawdzenie, czy drzewo jest puste
    	T& top(); //funkcja zwracająca wartość korzenia drzewa
        void clear(RBNode<T> *node); //funkcja czyszczaca drzewo
        void preorder(); //funkcja wypisująca elementy w preorder
        void inorder(); //funkcja wypisująca elementy w inorder
        void postorder(); //funkcja wypisująca elementy w postorder
        RBNode<T>* search(T item); //funkcja poszukiwania elementa w drzewie o zadanej wartości
        void insert(T item); //wstawianie elementa do drzewa
        void delete_node(T value); // funkcja usuwania węzła z drzewa
        void pretty_print(); // funkcja wizualizacji drzewa 
	};

Uruchomianie:
    make; ./main.out
